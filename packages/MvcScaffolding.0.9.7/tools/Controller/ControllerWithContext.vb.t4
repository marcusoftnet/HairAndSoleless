<#@ template language="C#" HostSpecific="True"  inherits="DynamicTransform" #>
<#@ Output Extension="vb" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="EnvDTE" #>
Imports System.Data
Imports System.Data.Entity
Imports System.Linq
Imports System.Web.Mvc
<# if(!string.IsNullOrEmpty(Model.ModelTypeNamespace)) { #>
Imports <#= Model.ModelTypeNamespace #>
<# } #>
<# if((!string.IsNullOrEmpty(Model.DbContextNamespace)) && (Model.DbContextNamespace != Model.ModelTypeNamespace)) { #>
Imports <#= Model.DbContextNamespace #>
<# } #>

<#= T4Scaffolding.Namespaces.BeginVb(Model.ControllerNamespace, Model.DefaultNamespace) #>
<#  
	var modelType = (CodeType)Model.ModelType; 
	var modelName = modelType.Name; 
	var modelNamePlural = Model.ModelTypePluralized; 
	var modelVariable = modelName.ToLower(); 
	var relatedEntities = ((IEnumerable)Model.RelatedEntities).OfType<RelatedEntityInfo>();
	var primaryKeyProperty = modelType.VisibleMembers().OfType<CodeProperty>().Single(x => x.Name == Model.PrimaryKey); 
#>
    Public Class <#= Model.ControllerName #> : Inherits Controller
        Private context As <#= Model.DbContextType #> = New <#= Model.DbContextType #>()

        ' GET: /<#= modelName #>/
        Public Function Index() As ViewResult 
<#
	var propertiesToInclude = relatedEntities.Select(relation => relation.LazyLoadingProperty).Where(x => x != null);
	var includeExpressions = String.Join("", propertiesToInclude.Select(x => String.Format(".Include(Function({0}) {0}.{1})", modelVariable, x.Name)));
#>
            return View(context.<#= modelNamePlural #><#= includeExpressions #>.ToList())
        End Function

        ' GET: /<#= modelName #>/Details/5
        Public Function Details(id As <#= primaryKeyProperty.Type.AsString #>) As ViewResult
			Dim <#= modelVariable #> As <#= modelName #> = context.<#= modelNamePlural #>.Single(Function(x) x.<#= primaryKeyProperty.Name #> = id)
            Return View(<#= modelVariable #>)
        End Function

        ' GET: /<#= modelName #>/Create
        Public Function Create() As ViewResult
<# foreach(var relatedEntity in relatedEntities.Where(x => x.RelationType == RelationType.Parent)) { #>
			ViewBag.Possible<#= relatedEntity.RelationNamePlural #> = context.<#= relatedEntity.RelatedEntityTypeNamePlural #>
<# } #>
            Return View()
        End Function

        ' POST: /<#= modelName #>/Create
        <HttpPost>
        Public Function Create(<#= modelVariable #> As <#= modelName #>) As ActionResult
            If ModelState.IsValid
<# if(primaryKeyProperty.Type.AsString == "System.Guid") { #>
				<#= modelVariable #>.<#= primaryKeyProperty.Name #> = Guid.NewGuid()
<# } #>
                context.<#= modelNamePlural #>.Add(<#= modelVariable #>)
                context.SaveChanges()
                Return RedirectToAction("Index")
			Else
<# foreach(var relatedEntity in relatedEntities.Where(x => x.RelationType == RelationType.Parent)) { #>
				ViewBag.Possible<#= relatedEntity.RelationNamePlural #> = context.<#= relatedEntity.RelatedEntityTypeNamePlural #>
<# } #>
				Return View()
            End If
        End Function
        
        ' GET: /<#= modelName #>/Edit/5
        Public Function Edit(id As <#= primaryKeyProperty.Type.AsString #>) As ViewResult
		     Dim <#= modelVariable #> As <#= modelName #> = context.<#= modelNamePlural #>.Single(Function(x) x.<#= primaryKeyProperty.Name #> = id)
<# foreach(var relatedEntity in relatedEntities.Where(x => x.RelationType == RelationType.Parent)) { #>
			 ViewBag.Possible<#= relatedEntity.RelationNamePlural #> = context.<#= relatedEntity.RelatedEntityTypeNamePlural #>
<# } #>
             Return View(<#= modelVariable #>)
        End Function

        ' POST: /<#= modelName #>/Edit/5
        <HttpPost>
        Public Function Edit(<#= modelVariable #> As <#= modelName #>) As ActionResult
            If ModelState.IsValid
				context.Entry(<#= modelVariable #>).State = EntityState.Modified
                context.SaveChanges()
                Return RedirectToAction("Index")
			Else
<# foreach(var relatedEntity in relatedEntities.Where(x => x.RelationType == RelationType.Parent)) { #>
				ViewBag.Possible<#= relatedEntity.RelationNamePlural #> = context.<#= relatedEntity.RelatedEntityTypeNamePlural #>
<# } #>
				Return View()
            End If
        End Function

        ' GET: /<#= modelName #>/Delete/5
        Public Function Delete(id As <#= primaryKeyProperty.Type.AsString #>) As ViewResult
			Dim <#= modelVariable #> as <#= modelName #> = context.<#= modelNamePlural #>.Single(Function(x) x.<#= primaryKeyProperty.Name #> = id)
            Return View(<#= modelVariable #>)
        End Function

        ' POST: /<#= modelName #>/Delete/5
        <HttpPost, ActionName("Delete")>
        Public Function DeleteConfirmed(id as <#= primaryKeyProperty.Type.AsString #>) As ActionResult
            Dim <#= modelVariable #> As <#= modelName #> = context.<#= modelNamePlural #>.Single(Function(x) x.<#= primaryKeyProperty.Name #> = id)
            context.<#= modelNamePlural #>.Remove(<#= modelVariable #>)
			context.SaveChanges()
            Return RedirectToAction("Index")
        End Function
    End Class
<#= T4Scaffolding.Namespaces.EndVb(Model.ControllerNamespace, Model.DefaultNamespace) #>