<#@ template language="C#" HostSpecific="True"  inherits="DynamicTransform" #>
<#@ Output Extension="cs" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="EnvDTE" #>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
<# if(!string.IsNullOrEmpty(Model.ModelTypeNamespace)) { #>
using <#= Model.ModelTypeNamespace #>;
<# } #>
<# if(Model.DbContextNamespace != Model.ModelTypeNamespace) { #>
using <#= Model.DbContextNamespace #>;
<# } #>

namespace <#= Model.ControllerNamespace #>
{   
<#  
	var modelType = (CodeType)Model.ModelType; 
	var modelName = modelType.Name; 
	var modelNamePlural = Model.ModelTypePluralized; 
	var modelVariable = modelName.ToLower(); 
	var relatedEntities = ((IEnumerable)Model.RelatedEntities).OfType<RelatedEntityInfo>();
	var primaryKeyProperty = modelType.VisibleMembers().OfType<CodeProperty>().Single(x => x.Name == Model.PrimaryKey); 
#>
    public class <#= Model.ControllerName #> : Controller
    {
<# foreach(var repository in Repositories.Keys) { #>
		private readonly I<#= Repositories[repository].RepositoryTypeName #> <#= Repositories[repository].VariableName #>;
<# } #>

		// If you are using Dependency Injection, you can delete the following constructor
        public <#= Model.ControllerName #>() : this(<#= String.Join(", ", Repositories.Values.Select(x => "new " + x.RepositoryTypeName + "()")) #>)
        {
        }

        public <#= Model.ControllerName #>(<#= String.Join(", ", Repositories.Values.Select(x => "I" + x.RepositoryTypeName + " " + x.VariableName)) #>)
        {
<# foreach(var repository in Repositories.Values) { #>
			this.<#= repository.VariableName #> = <#= repository.VariableName #>;
<# } #>
        }

        //
        // GET: /<#= modelName #>/

        public ViewResult Index()
        {
<#
	var propertiesToInclude = relatedEntities.Select(relation => relation.LazyLoadingProperty).Where(x => x != null);
	var includeExpressions = String.Join(", ", propertiesToInclude.Select(x => String.Format("{0} => {0}.{1}", modelVariable, x.Name)));
#>
            return View(<#= Repositories[modelType].VariableName #>.GetAll<#= modelNamePlural #>(<#= includeExpressions #>));
        }

        //
        // GET: /<#= modelName #>/Details/5

        public ViewResult Details(<#= primaryKeyProperty.Type.AsString #> id)
        {
            return View(<#= Repositories[modelType].VariableName #>.GetById(id));
        }

        //
        // GET: /<#= modelName #>/Create

        public ActionResult Create()
        {
<# foreach(var relatedEntity in relatedEntities.Where(x => x.RelationType == RelationType.Parent)) { #>
			ViewBag.Possible<#= relatedEntity.RelationNamePlural #> = <#= Repositories[relatedEntity.RelatedEntityType].VariableName #>.GetAll<#= relatedEntity.RelatedEntityTypeNamePlural #>();
<# } #>
            return View();
        } 

        //
        // POST: /<#= modelName #>/Create

        [HttpPost]
        public ActionResult Create(<#= modelName #> <#= modelVariable #>)
        {
            if (ModelState.IsValid) {
                <#= Repositories[modelType].VariableName #>.InsertOrUpdate(<#= modelVariable #>);
                <#= Repositories[modelType].VariableName #>.Save();
                return RedirectToAction("Index");
            } else {
<# foreach(var relatedEntity in relatedEntities.Where(x => x.RelationType == RelationType.Parent)) { #>
				ViewBag.Possible<#= relatedEntity.RelationNamePlural #> = <#= Repositories[relatedEntity.RelatedEntityType].VariableName #>.GetAll<#= relatedEntity.RelatedEntityTypeNamePlural #>();
<# } #>
				return View();
			}
        }
        
        //
        // GET: /<#= modelName #>/Edit/5
 
        public ActionResult Edit(<#= primaryKeyProperty.Type.AsString #> id)
        {
<# foreach(var relatedEntity in relatedEntities.Where(x => x.RelationType == RelationType.Parent)) { #>
			ViewBag.Possible<#= relatedEntity.RelationNamePlural #> = <#= Repositories[relatedEntity.RelatedEntityType].VariableName #>.GetAll<#= relatedEntity.RelatedEntityTypeNamePlural #>();
<# } #>
             return View(<#= Repositories[modelType].VariableName #>.GetById(id));
        }

        //
        // POST: /<#= modelName #>/Edit/5

        [HttpPost]
        public ActionResult Edit(<#= modelName #> <#= modelVariable #>)
        {
            if (ModelState.IsValid) {
                <#= Repositories[modelType].VariableName #>.InsertOrUpdate(<#= modelVariable #>);
                <#= Repositories[modelType].VariableName #>.Save();
                return RedirectToAction("Index");
            } else {
<# foreach(var relatedEntity in relatedEntities.Where(x => x.RelationType == RelationType.Parent)) { #>
				ViewBag.Possible<#= relatedEntity.RelationNamePlural #> = <#= Repositories[relatedEntity.RelatedEntityType].VariableName #>.GetAll<#= relatedEntity.RelatedEntityTypeNamePlural #>();
<# } #>
				return View();
			}
        }

        //
        // GET: /<#= modelName #>/Delete/5
 
        public ActionResult Delete(<#= primaryKeyProperty.Type.AsString #> id)
        {
            return View(<#= Repositories[modelType].VariableName #>.GetById(id));
        }

        //
        // POST: /<#= modelName #>/Delete/5

        [HttpPost, ActionName("Delete")]
        public ActionResult DeleteConfirmed(<#= primaryKeyProperty.Type.AsString #> id)
        {
            <#= Repositories[modelType].VariableName #>.Delete(id);
            <#= Repositories[modelType].VariableName #>.Save();

            return RedirectToAction("Index");
        }
    }
}

<#+
class RepositoryInfo {
    public string RepositoryTypeName { get; set; }
    public string VariableName { get; set; }
}

IDictionary<CodeType, RepositoryInfo> _repositories;
IDictionary<CodeType, RepositoryInfo> Repositories {
	get {
		if (_repositories == null) {
			var relatedEntities = ((IEnumerable)Model.RelatedEntities).OfType<RelatedEntityInfo>();
			var relatedTypes = relatedEntities.Where(x => x.RelationType == RelationType.Parent).Select(x => x.RelatedEntityType).Distinct();
			_repositories = relatedTypes.ToDictionary(
				relatedType => relatedType,
				relatedType => new RepositoryInfo { RepositoryTypeName = relatedType.Name + "Repository", VariableName = relatedType.Name.ToLower() + "Repository" }
			); 
			_repositories[Model.ModelType] = new RepositoryInfo { RepositoryTypeName = Model.Repository, VariableName = ((CodeType)Model.ModelType).Name.ToLower() + "Repository" };
		}
		return _repositories;
	}
}
#>