<#@ template language="C#" HostSpecific="True"  inherits="DynamicTransform" #>
<#@ Output Extension="vb" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="EnvDTE" #>
Imports System.Linq
Imports System.Web.Mvc
<# if(!string.IsNullOrEmpty(Model.ModelTypeNamespace)) { #>
Imports <#= Model.ModelTypeNamespace #>
<# } #>
<# if((!string.IsNullOrEmpty(Model.DbContextNamespace)) && (Model.DbContextNamespace != Model.ModelTypeNamespace)) { #>
Imports <#= Model.DbContextNamespace #>
<# } #>

<#= T4Scaffolding.Namespaces.BeginVb(Model.ControllerNamespace, Model.DefaultNamespace) #>
<#  
	var modelType = (CodeType)Model.ModelType; 
	var modelName = modelType.Name; 
	var modelNamePlural = Model.ModelTypePluralized; 
	var modelVariable = modelName.ToLower(); 
	var relatedEntities = ((IEnumerable)Model.RelatedEntities).OfType<RelatedEntityInfo>();
	var primaryKeyProperty = modelType.VisibleMembers().OfType<CodeProperty>().Single(x => x.Name == Model.PrimaryKey); 
#>
    Public Class <#= Model.ControllerName #> : Inherits Controller
<# foreach(var repository in Repositories.Keys) { #>
		Private ReadOnly <#= Repositories[repository].VariableName #> As I<#= Repositories[repository].RepositoryTypeName #>
<# } #>

		' If you are using Dependency Injection, you can delete the following constructor
        Public Sub New()
			Me.New(<#= String.Join(", ", Repositories.Values.Select(x => "New " + x.RepositoryTypeName + "()")) #>)
        End Sub

        Public Sub New(<#= String.Join(", ", Repositories.Values.Select(x => "ByVal " + x.VariableName + " As " + x.RepositoryTypeName)) #>)
<# foreach(var repository in Repositories.Values) { #>
			Me.<#= repository.VariableName #> = <#= repository.VariableName #>
<# } #>
        End Sub

        ' GET: /<#= modelName #>/
        Public Function Index() As ViewResult
<#
	var propertiesToInclude = relatedEntities.Select(relation => relation.LazyLoadingProperty).Where(x => x != null);
	var includeExpressions = String.Join(", ", propertiesToInclude.Select(x => String.Format("Function({0}) {0}.{1}", modelVariable, x.Name)));
#>
            Return View(<#= Repositories[modelType].VariableName #>.GetAll<#= modelNamePlural #>(<#= includeExpressions #>))
        End Function

        ' GET: /<#= modelName #>/Details/5
        Public Function Details(ByVal id As <#= primaryKeyProperty.Type.AsString #>) As ViewResult
            Return View(<#= Repositories[modelType].VariableName #>.GetById(id))
        End Function

        ' GET: /<#= modelName #>/Create
        Public Function Create() As ActionResult
<# foreach(var relatedEntity in relatedEntities.Where(x => x.RelationType == RelationType.Parent)) { #>
			ViewBag.Possible<#= relatedEntity.RelationNamePlural #> = <#= Repositories[relatedEntity.RelatedEntityType].VariableName #>.GetAll<#= relatedEntity.RelatedEntityTypeNamePlural #>()
<# } #>
            Return View()
        End Function

        ' POST: /<#= modelName #>/Create
        <HttpPost>
        Public Function Create(ByVal <#= modelVariable #> As <#= modelName #>) As ActionResult
            If ModelState.IsValid
                <#= Repositories[modelType].VariableName #>.InsertOrUpdate(<#= modelVariable #>)
                <#= Repositories[modelType].VariableName #>.Save()
                Return RedirectToAction("Index")
			Else
<# foreach(var relatedEntity in relatedEntities.Where(x => x.RelationType == RelationType.Parent)) { #>
				ViewBag.Possible<#= relatedEntity.RelationNamePlural #> = <#= Repositories[relatedEntity.RelatedEntityType].VariableName #>.GetAll<#= relatedEntity.RelatedEntityTypeNamePlural #>()
<# } #>
				Return View()
            End If
        End Function
        
        ' GET: /<#= modelName #>/Edit/5
        Public Function Edit(ByVal id As <#= primaryKeyProperty.Type.AsString #>) As ActionResult
<# foreach(var relatedEntity in relatedEntities.Where(x => x.RelationType == RelationType.Parent)) { #>
			ViewBag.Possible<#= relatedEntity.RelationNamePlural #> = <#= Repositories[relatedEntity.RelatedEntityType].VariableName #>.GetAll<#= relatedEntity.RelatedEntityTypeNamePlural #>()
<# } #>
            Return View(<#= Repositories[modelType].VariableName #>.GetById(id))
        End Function

        ' POST: /<#= modelName #>/Edit/5
        <HttpPost>
        Public Function Edit(ByVal <#= modelVariable #> As <#= modelName #>) As ActionResult
            If ModelState.IsValid
                <#= Repositories[modelType].VariableName #>.InsertOrUpdate(<#= modelVariable #>)
                <#= Repositories[modelType].VariableName #>.Save()
                Return RedirectToAction("Index")
			Else
<# foreach(var relatedEntity in relatedEntities.Where(x => x.RelationType == RelationType.Parent)) { #>
				ViewBag.Possible<#= relatedEntity.RelationNamePlural #> = <#= Repositories[relatedEntity.RelatedEntityType].VariableName #>.GetAll<#= relatedEntity.RelatedEntityTypeNamePlural #>()
<# } #>
				Return View()
            End If
        End Function

        ' GET: /<#= modelName #>/Delete/5
        Public Function Delete(ByVal id As <#= primaryKeyProperty.Type.AsString #>) As ActionResult
            Return View(<#= Repositories[modelType].VariableName #>.GetById(id))
        End Function

        ' POST: /<#= modelName #>/Delete/5
        <HttpPost, ActionName("Delete")>
        Public Function DeleteConfirm(ByVal id As <#= primaryKeyProperty.Type.AsString #>) As ActionResult
            <#= Repositories[modelType].VariableName #>.Delete(id)
            <#= Repositories[modelType].VariableName #>.Save()
            Return RedirectToAction("Index")
        End Function
    End Class
<#= T4Scaffolding.Namespaces.EndVb(Model.ControllerNamespace, Model.DefaultNamespace) #>
<#+
class RepositoryInfo {
    public string RepositoryTypeName { get; set; }
    public string VariableName { get; set; }
}

IDictionary<CodeType, RepositoryInfo> _repositories;
IDictionary<CodeType, RepositoryInfo> Repositories {
	get {
		if (_repositories == null) {
			var relatedEntities = ((IEnumerable)Model.RelatedEntities).OfType<RelatedEntityInfo>();
			var relatedTypes = relatedEntities.Where(x => x.RelationType == RelationType.Parent).Select(x => x.RelatedEntityType).Distinct();
			_repositories = relatedTypes.ToDictionary(
				relatedType => relatedType,
				relatedType => new RepositoryInfo { RepositoryTypeName = relatedType.Name + "Repository", VariableName = relatedType.Name.ToLower() + "Repository" }
			); 
			_repositories[Model.ModelType] = new RepositoryInfo { RepositoryTypeName = Model.Repository, VariableName = ((CodeType)Model.ModelType).Name.ToLower() + "Repository" };
		}
		return _repositories;
	}
}
#>